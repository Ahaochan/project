<?xml version="1.0" encoding="UTF-8"?>
<included>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!-- ============================================= 属性 配置 ============================================= -->
    <!-- 只能读取 Properties, 参考 README.md -->
    <!-- <property resource="application.yml" /> -->

    <springProperty name="app.name" source="spring.application.name" defaultValue="UnKnowContextName"/>
    <springProperty name="app.profile" source="spring.profiles.active" defaultValue="dev"/>

    <property name="log.charset" value="UTF-8"/>
    <property name="log.history.max" value="30"/>
    <property name="log.path" value="LOG"/>
    <property name="log.file.error" value="${log.path}/${app.name}_${app.profile}_%d{yyyy-MM-dd}_error.log"/>
    <!-- Log4j: [S][%d{yyyyMMdd HH:mm:ss}][%-5p][%C:%L] - %m%n -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->

    <property name="log.date" value="%d{yyyy-MM-dd HH:mm:ss.SSS}"/>
    <property name="log.level" value="${LOG_LEVEL_PATTERN:-%5p}"/>
    <property name="log.pid" value="${PID:- }"/>
    <property name="log.thread" value="[%15.15t]"/>
    <property name="log.logger" value="%-40.40logger{39}"/>
    <property name="log.message" value="%m"/>
    <property name="log.exception" value="%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <property name="mdc.req" value="%X{REQ:-}"/>

    <property name="log.pattern.console" value="%clr(${log.date}){faint} %clr(${app.name}){blue} %clr(-${mdc.req}-){faint} %clr(${log.level}) %clr(${log.pid}){magenta} %clr(---){faint} %clr(${log.thread}){faint} %clr(${log.logger}){cyan} %clr(:){faint} ${log.message}${log.exception}"/>
    <property name="log.pattern.file" value="${log.date} ${app.name} -${mdc.req}- ${log.level} ${log.pid} --- ${log.thread} ${log.logger} : ${log.message}${log.exception}"/>

    <contextName>${app.name}</contextName>
    <jmxConfigurator/>
    <!-- ============================================= 属性 配置 ============================================= -->

    <!-- ============================================= Appender 配置 ============================================= -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern.console}</pattern>
            <charset>${log.charset}</charset>
        </encoder>
    </appender>
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${log.pattern.file}</pattern>
            <charset>${log.charset}</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.file.error}</fileNamePattern>
            <maxHistory>${log.history.max}</maxHistory>
        </rollingPolicy>
    </appender>
    <appender name ="ASYNC_FILE_ERROR" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref ="FILE_ERROR"/>
    </appender>
    <!-- ============================================= Appender 配置 ============================================= -->

    <!-- ============================================= 日志级别 配置 ============================================= -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
    </root>
    <!-- ============================================= 日志级别 配置 ============================================= -->
</included>
